# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from upgrade_server.models.base_model_ import Model
from upgrade_server import util


class File(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file_name: str=None, file_size: int=None):  # noqa: E501
        """File - a model defined in Swagger

        :param file_name: The file_name of this File.  # noqa: E501
        :type file_name: str
        :param file_size: The file_size of this File.  # noqa: E501
        :type file_size: int
        """
        self.swagger_types = {
            'file_name': str,
            'file_size': int
        }

        self.attribute_map = {
            'file_name': 'file_name',
            'file_size': 'file_size'
        }

        self._file_name = file_name
        self._file_size = file_size

    @classmethod
    def from_dict(cls, dikt) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The file of this File.  # noqa: E501
        :rtype: File
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_name(self) -> str:
        """Gets the file_name of this File.


        :return: The file_name of this File.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str):
        """Sets the file_name of this File.


        :param file_name: The file_name of this File.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_size(self) -> int:
        """Gets the file_size of this File.


        :return: The file_size of this File.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size: int):
        """Sets the file_size of this File.


        :param file_size: The file_size of this File.
        :type file_size: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")  # noqa: E501

        self._file_size = file_size
